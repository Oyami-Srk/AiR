#!/usr/bin/env python3
from PIL import Image
import argparse
import time
import sys
import os
import re
import json

parser = argparse.ArgumentParser(
    description="Convert alpha png bitmap to bytes array in C for Display.",
    add_help=False
)

parser.add_argument('--help', action='help',
                    help='show this help message and exit')

parser.add_argument(
    "image",
    metavar="IMAGE",
    type=str,
    nargs="+",
    help="Image to be processed",
)

parser.add_argument(
    "-w",
    "--width",
    type=int,
    dest="width",
    default=16,
    help="Width of each bitmap"
)

parser.add_argument(
    "-h",
    "--height",
    type=int,
    dest="height",
    default=16,
    help="Height of each bitmap"
)

parser.add_argument(
    "-s",
    "--strip",
    action="store_true",
    dest="strip",
    default=True,
    help="Should image be strip into pieces?"
)

parser.add_argument(
    "-x",
    type=int,
    dest="x",
    help="beginning of bitmaps in x",
    default=0
)

parser.add_argument(
    "-y",
    type=int,
    dest="y",
    help="beginning of bitmaps in y",
    default=0
)

parser.add_argument(
    "-i",
    "--invert",
    action="store_true",
    dest="invert",
    help="Invert the black and white",
    default=False
)

parser.add_argument(
    "-b",
    "--bits",
    type=int,
    dest="bits",
    help="Bit length",
    default=8
)

parser.add_argument(
    "-o",
    "--output",
    type=str,
    dest="output",
    help="Output destination, - for stdout",
    default="-"
)

parser.add_argument(
    "-t",
    "--type",
    type=str,
    dest="type",
    help="Output type, available: plain, array, header",
    default="plain"
)


def bits_to_int(bits: list) -> int:
    out = 0
    for b in bits:
        out = (out << 1) | b
    return out


def process_bitmap(bitmap: Image, invert: bool, bits: int) -> list:
    if bits not in [8, 16, 32]:
        raise Exception(
            "Wrong bits length, must be 8, 16 or 32. Provided: " + str(bits))

    flat_pixel_list = []
    pixels = bitmap.load()
    for y in range(0, bitmap.height):
        for x in range(0, bitmap.width):
            a = True if pixels[x, y] == 255 else False
            a = a if not invert else not a
            a = int(a)
            flat_pixel_list.append(a)

    if 1 not in flat_pixel_list:
        return []

    if (bitmap.width * bitmap.height) % bits != 0:
        flat_pixel_list.extend([0] * ((bitmap.width * bitmap.height) % bits))

    return [bits_to_int(flat_pixel_list[x:x + bits]) for x in range(0, len(flat_pixel_list), bits)]


def process_image(img: Image, bitmap_width: int, bitmap_height: int, begin_x: int, begin_y: int, invert: bool,
                  bits: int) -> list:
    img = img.convert('1')
    img_w = img.width
    img_h = img.height
    result = []
    current_x = begin_x
    current_y = begin_y
    total_x = img_w // bitmap_width
    total_y = img_h // bitmap_height

    for y in range(0, total_y):
        for x in range(0, total_x):
            r = process_bitmap(
                img.crop(
                    (current_x, current_y, current_x +
                     bitmap_width, current_y + bitmap_height)
                ), invert, bits)
            if r:
                result.append(r)
            current_x += bitmap_width
        current_x = 0
        current_y += bitmap_height
    return result


array_template = "const static uint{bits}_t bitmap_{count}[] = {{{hex}}};"
header_begin = """/*************************************************************
* Auto-generated by process_bitmap.py at {} *
*     Script is written by Shiroko <hhx.xxm@gmail.com>       *
*      Thanks for your using. Have a nice day ^_^ ~          *
*          Feel free to modify it if necessary               *
*************************************************************/
#ifndef __BITMAP_RESOURCE_H__
#define __BITMAP_RESOURCE_H__

#include <stdint.h>

#ifdef __cplusplus 
extern "C" {{
#endif 
"""
header_end = """
#ifdef __cplusplus 
}
#endif 

#endif // __BITMAP_RESOURCE_H__
"""

if __name__ == "__main__":
    args = parser.parse_args()
    outputs = []
    outputs_names = []
    array_templates = []
    for image in args.image:
        output = process_image(Image.open(
            image), args.width, args.height, args.x, args.y, args.invert, args.bits)
        outputs.extend(output)
        json_fn = re.sub("(JPG|jpg|PNG|png|JPEG|jpeg)", "json", image)
        if os.path.exists(json_fn):
            with open(json_fn, "r") as f:
                obj = json.load(f)
                outputs_names.extend(obj["names"])
                if len(obj["names"]) > len(output):
                    for _ in range(0, len(obj["names"]) - len(output)):
                        outputs_names.pop()
                elif len(obj["names"]) < len(output):
                    outputs_names.extend(
                        [""] * (len(output) - len(obj["names"])))
                array_templates.extend(
                    [obj["config"]["array_template"]]*len(output))
        else:
            outputs_names.extend([""] * len(output))
            array_templates.extend([array_template] * len(output))

    output_file = args.output
    file = None
    if output_file == "-":
        file = sys.stdout
    else:
        try:
            file = open(output_file, "w")
        except Exception as e:
            print("Cannot open file " + output_file +
                  " due to " + str(e), file=sys.stderr)
            exit(1)
    kind = args.type
    if kind == "header":
        print(header_begin.format(time.strftime("%Y/%m/%d %H:%M:%S")), file=file)
    i = 0
    for o in outputs:
        hexs = ", ".join(["0x%0*X" % (args.bits // 4, x) for x in o])
        if kind == "header" or kind == "array":
            print(array_templates[i].format(
                **{
                    "bits": args.bits,
                    "count": i,
                    "hex": hexs,
                    "name": outputs_names[i] if outputs_names[i] != "" else str(i)
                }), file=file)
        else:
            print(hexs, file=file)
        i += 1
    if kind == "header":
        print(header_end, file=file)
    if output_file != "-":
        file.flush()
        file.close()
